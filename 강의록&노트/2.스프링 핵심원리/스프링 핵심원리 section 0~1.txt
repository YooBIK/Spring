스프링의 진정한 가치 : 객체 지향 프로그래밍

스프링 탄생 배경 
2000년 초 자바의 표준 기술은 EJB(Enterprise Java Beans)였음
고급기술들이 잘지원됐음 근데 비쌈 진짜 어렵고 복잡하고 느림

스프링과 JPA 둘다 중요함

핵심 개념
스프링은 자바 기반의 프레임워크
자바는 객체 지향 언어임
스프링은 객체 지향 언어가 가진 장점을 살리는 프레임워크로써
좋은 객체 지향 앱을 개발할수 있게 도와준다.

객체 지향 프로그래밍
특징 : 추상화, 캡슐, 상속, 다형성***

역할과 구현으로 분리해서 생각하자
단순해지고 유연하고 변경에 용이하다.

클라이언트는 대상의 역할(인터페이스)만 알면된다.
클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않고,
구현 대상 자체가 바뀌어도 영향을 받지 않는다.

자바에서 다형성을 활용
역할 = 인터페이스
구현 = 인터페이스를 구현한 클래스, 구현 객체
객체를 설계할 때 역할과 구현을 명확하게 분리하자

실무에선 혼자 있는 객체는 없다.(클라이언트 : 요청서버 : 응답)

인터페이스를 안정적으로 설계하는 것이 정말 중요하다.
역할이 바뀌면 ㅈ댄다 다 바뀌어야한다.

결국 객체 지향에서 다형성이 가장 중요하다.

SOLID
-SRP(Single Responsibility Principle) 단일 책임 원칙
하나의 클래스는 하나의 책임만 가져야 한다.
변경이 있을 때 파급효과가 적으면(필요한 부분만 고칠 수 있게 설계했으면) 단일 책임 원칙을 잘 따른 것이다.

-OCP(Open/Closed Principle) 개방-폐쇄 원칙
소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
다형성을 활용하자
인터페이스를 통해 새로운 클래스를 만들어 새로운 기능을 구현
객체를 생성하고, 연관관계를 맺어주는 조립, 설정자가 필요하다.

-LSP(Liskov Substitution Principle) 리스코프 치환 원칙
프로그램 객체는 프로그램의 정확성을 깨뜨리지 않으면서, 하위 타입의 인스턴스로 바꿀 수 있어야한다.
단순히 컴파일되고 안되고의 문제가 아니고, 하위클래스는 인터페이스 규약을
지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 인터페이스를 통해 구현한 구현체를 믿고 사용하려면 이 원칙을 따라야한다.

-ISP(Interface Segregation Principle) 인터페이스 분리 원칙
범용적인 하나의 인터페이스보다 특정 클라이언트를 위한 인터페이스 여러개가 낫다.
인터페이스가 명확해진다. 대체 가능성이 높아진다.

-DIP(Dependency Inversion Principle) 의존관계 역전 원칙
추상화에 의존해야지, 구체화에 의존하면 안된다. 
역할(인터페이스)에 의존해야지 구현(구현체)에 의존하게되면 변경이 어려워진다.

즉, 객체지향의 핵심은 다형성이다. 근데 이것만 가지고는 부품을 갈아 끼우듯이 개발할 수 없다.
코드도 변경되기 때문에 다형성만 가지고 OCP, DIP를 지킬 수 없음

스프링은 DI(Dependency Injection)를 통해 다형성과 OCP, DIP를 가능하게 한다.

인터페이스를 써서 개발하는 것을 기본으로 하되 확장 가능성을 따져서 필요에 따라 구체 클래스로 구현하는 것도 방법이다.
